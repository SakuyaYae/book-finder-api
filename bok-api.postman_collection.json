{
	"info": {
		"_postman_id": "ca792aa0-6a6b-491d-8fbd-a300aab03856",
		"name": "bok-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33841596",
		"_collection_link": "https://www.postman.com/sakuyahimeragi/workspace/my-workspace/collection/33841596-ca792aa0-6a6b-491d-8fbd-a300aab03856?action=share&source=collection_link&creator=33841596"
	},
	"item": [
		{
			"name": "automatic tests",
			"item": [
				{
					"name": "Test 1: Test 2: get all books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4444/api/books",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4444",
							"path": [
								"api",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 3: invalid post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n      \"title\": \"The warframe saga\",\r\n      \"author\": \"サクヤ\",\r\n      \"genre\": \"si-fi\",\r\n      \"releaseDate\": \"sun 29 2020\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4444/api/books",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4444",
							"path": [
								"api",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 5: get all books paginated res",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"checking for paginated result\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(pm.response.json().booksPerPage)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4444/api/books?page=2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4444",
							"path": [
								"api",
								"books"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 4: get books by title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"chcek title to be like the endpoint\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1][0].title).to.eql(\"History of Vanuatu\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4444/api/filter/title/History of Vanuatu",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4444",
							"path": [
								"api",
								"filter",
								"title",
								"History of Vanuatu"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 4: get books by genre",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"chcek genre to be like the endpoint si-fi\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1][0].genre).to.eql(\"si-fi\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4444/api/filter/genre/si-fi",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4444",
							"path": [
								"api",
								"filter",
								"genre",
								"si-fi"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 4:  get book by author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4444/api/filter/author/Tammy Hessel",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4444",
							"path": [
								"api",
								"filter",
								"author",
								"Tammy Hessel"
							]
						}
					},
					"response": []
				},
				{
					"name": "books sorted by title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4444/api/books/sort/title",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4444",
							"path": [
								"api",
								"books",
								"sort",
								"title"
							]
						}
					},
					"response": []
				},
				{
					"name": "books sorted by genre",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4444/api/books/sort/genre",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4444",
							"path": [
								"api",
								"books",
								"sort",
								"genre"
							]
						}
					},
					"response": []
				},
				{
					"name": "books sorted by author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4444/api/books/sort/author",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4444",
							"path": [
								"api",
								"books",
								"sort",
								"author"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 6: post book whit katakana",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.environment.set(\"id\", pm.response.json()[1]._id);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"pm.test(\"special characters works as inputdata and kan be read correctly\", function () {\r",
									"    const reqObj = JSON.parse(pm.request.body.raw);\r",
									"        pm.expect(pm.response.json()[1].author).to.be.equal(reqObj.author);\r",
									"        pm.expect(pm.response.json()[1].title).to.be.equal(reqObj.title);\r",
									"        pm.expect(pm.response.json()[1].genre).to.be.equal(reqObj.genre);\r",
									"        pm.expect(pm.response.json()[1].info).to.be.equal(reqObj.info);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n      \"title\": \"The rise of the oda clan\",\r\n      \"author\": \"サクヤ\",\r\n      \"genre\": \"action\",\r\n      \"releaseDate\": \"sun 29 2020\",\r\n      \"info\": \"====================================================\",\r\n      \"rating\": \"5\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4444/api/books",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4444",
							"path": [
								"api",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 7: chain request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"for(var i = 0;i<10;i++){ \r",
									"pm.sendRequest(\"http://localhost:4444/api/books\",(error, response) => {\r",
									"  if (error) {\r",
									"    console.log(error);\r",
									"  }\r",
									"     \r",
									"  pm.test(\"checking title betwhin requests\", () => {\r",
									"    var res = response.json();\r",
									"    pm.expect(pm.response.json()[0].title).to.be.equal(res[0].title);\r",
									"  });\r",
									"    pm.test(\"checking author betwhin requests\", () => {\r",
									"    var res = response.json();\r",
									"    pm.expect(pm.response.json()[0].author).to.be.equal(res[0].author);\r",
									"  });\r",
									"});\r",
									"};"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4444/api/books",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4444",
							"path": [
								"api",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 8: post book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.environment.set(\"id\", pm.response.json()[1]._id);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n      \"title\": \"The warframe saga\",\r\n      \"author\": \"サクヤ\",\r\n      \"genre\": \"si-fi\",\r\n      \"releaseDate\": \"sun 29 2020\",\r\n      \"info\": \"====================================================\",\r\n      \"rating\": \"5\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4444/api/books",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4444",
							"path": [
								"api",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 8: update book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"const reqObj = JSON.parse(pm.request.body.raw);\r",
									"pm.environment.set(\"book\", reqObj);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n      \"title\": \"The rise of darkness\",\r\n      \"author\": \"サクヤ\",\r\n      \"genre\": \"si-fi\",\r\n      \"releaseDate\": \"sun 19 2010\",\r\n      \"info\": \"0ohshfifisgfidfgsihuhdfiuhsifhusidhfiuhfsdhfishfsiudhfi\",\r\n      \"rating\": \"5\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4444/api/books/{{id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4444",
							"path": [
								"api",
								"books",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 9: get book by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"const obj={\r",
									"        \"title\" : pm.response.json()[1].title,\r",
									"        \"author\" : pm.response.json()[1].author,\r",
									"        \"genre\" : pm.response.json()[1].genre,\r",
									"        \"releaseDate\" : pm.response.json()[1].releaseDate,\r",
									"        \"info\":  pm.response.json()[1].info,\r",
									"        \"rating\" : pm.response.json()[1].rating,\r",
									"    }\r",
									"pm.test(\"author is consistent\",function () {\r",
									"    const bookFromPut = pm.environment.get(\"book\");\r",
									"    pm.expect(bookFromPut.author).to.be.equal(obj.author);\r",
									"});\r",
									"pm.test(\"title is consistent\",function () {\r",
									"    const bookFromPut = pm.environment.get(\"book\");\r",
									"    pm.expect(bookFromPut.title).to.be.equal(obj.title);\r",
									"});\r",
									"pm.test(\"genre is consistent\",function () {\r",
									"    const bookFromPut = pm.environment.get(\"book\");\r",
									"    pm.expect(bookFromPut.genre).to.be.equal(obj.genre);\r",
									"});\r",
									"pm.test(\"releaseDate is consistent\",function () {\r",
									"    const bookFromPut = pm.environment.get(\"book\");\r",
									"    pm.expect(bookFromPut.releaseDate).to.be.equal(obj.releaseDate);\r",
									"});\r",
									"pm.test(\"info is consistent\",function () {\r",
									"    const bookFromPut = pm.environment.get(\"book\");\r",
									"    pm.expect(bookFromPut.info).to.be.equal(obj.info);\r",
									"});\r",
									"pm.test(\"rating is consistent\",function () {\r",
									"    const bookFromPut = pm.environment.get(\"book\");\r",
									"    pm.expect(bookFromPut.rating).to.be.equal(obj.rating);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4444/api/books/{{id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4444",
							"path": [
								"api",
								"books",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 8: delete book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:4444/api/books/{{id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4444",
							"path": [
								"api",
								"books",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 11: disconnect db",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4444/api/testing/connection/close",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4444",
							"path": [
								"api",
								"testing",
								"connection",
								"close"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 11: get all books no db",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4444/api/books",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4444",
							"path": [
								"api",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 11: open db connection",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4444/api/testing/connection/open",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4444",
							"path": [
								"api",
								"testing",
								"connection",
								"open"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 11: get all books reconnected to db",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4444/api/books",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4444",
							"path": [
								"api",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 12: edge case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n      \"title\": \"The warframe saga\",\r\n      \"author\": \"サクヤ\",\r\n      \"genre\": \"si-fi\",\r\n      \"releaseDate\": 20\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4444/api/books",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4444",
							"path": [
								"api",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 13: check rate limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"X-RateLimit-Limit is present\", function () {\r",
									"    pm.response.to.have.header(\"X-RateLimit-Limit\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://localhost:4444/api/books",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4444",
							"path": [
								"api",
								"books"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "cleaning/connection",
			"item": [
				{
					"name": "cleanup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:4444/api/cleaner",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4444",
							"path": [
								"api",
								"cleaner"
							]
						}
					},
					"response": []
				},
				{
					"name": "connection state",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4444/api/testing/connection/state",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4444",
							"path": [
								"api",
								"testing",
								"connection",
								"state"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test 1: Test 2: get all books check content type",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"        pm.response.to.have.header(\"Content-Type\");\r",
							"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4444/api/books",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4444",
					"path": [
						"api",
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test 3: invalid post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"        pm.response.to.have.header(\"Content-Type\");\r",
							"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n      \"title\": \"The warframe saga\",\r\n      \"author\": \"サクヤ\",\r\n      \"genre\": \"si-fi\",\r\n      \"releaseDate\": \"sun 29 2020\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4444/api/books",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4444",
					"path": [
						"api",
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test 5: get all books paginated res",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"        pm.response.to.have.header(\"Content-Type\");\r",
							"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"pm.test(\"checking for paginated result\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(pm.response.json().booksPerPage)\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4444/api/books?page=2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4444",
					"path": [
						"api",
						"books"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test 4: get books by title",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"        pm.response.to.have.header(\"Content-Type\");\r",
							"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"pm.test(\"chcek title to be like the endpoint\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[1][0].title).to.eql(\"History of Tanzania\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4444/api/filter/title/History of Tanzania",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4444",
					"path": [
						"api",
						"filter",
						"title",
						"History of Tanzania"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test 4: get books by genre",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"        pm.response.to.have.header(\"Content-Type\");\r",
							"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"pm.test(\"chcek genre to be like the endpoint si-fi\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[1][0].genre).to.eql(\"si-fi\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4444/api/filter/genre/si-fi",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4444",
					"path": [
						"api",
						"filter",
						"genre",
						"si-fi"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test 4: get book by author",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"        pm.response.to.have.header(\"Content-Type\");\r",
							"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4444/api/filter/author/Edmond Jacobson",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4444",
					"path": [
						"api",
						"filter",
						"author",
						"Edmond Jacobson"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test 2: books sorted by title",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"        pm.response.to.have.header(\"Content-Type\");\r",
							"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4444/api/books/sort/title",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4444",
					"path": [
						"api",
						"books",
						"sort",
						"title"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test 2: books sorted by genre",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"        pm.response.to.have.header(\"Content-Type\");\r",
							"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4444/api/books/sort/genre",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4444",
					"path": [
						"api",
						"books",
						"sort",
						"genre"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test 2: books sorted by author",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"        pm.response.to.have.header(\"Content-Type\");\r",
							"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4444/api/books/sort/author",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4444",
					"path": [
						"api",
						"books",
						"sort",
						"author"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test 6: post book whit katakana",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.environment.set(\"id\", pm.response.json()[1]._id);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"        pm.response.to.have.header(\"Content-Type\");\r",
							"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"pm.test(\"special characters works as inputdata and kan be read correctly\", function () {\r",
							"    const reqObj = JSON.parse(pm.request.body.raw);\r",
							"        pm.expect(pm.response.json()[1].author).to.be.equal(reqObj.author);\r",
							"        pm.expect(pm.response.json()[1].title).to.be.equal(reqObj.title);\r",
							"        pm.expect(pm.response.json()[1].genre).to.be.equal(reqObj.genre);\r",
							"        pm.expect(pm.response.json()[1].info).to.be.equal(reqObj.info);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n      \"title\": \"The rise of the mori clan\",\r\n      \"author\": \"サクヤ\",\r\n      \"genre\": \"action\",\r\n      \"releaseDate\": \"sun 29 2020\",\r\n      \"info\": \"====================================================\",\r\n      \"rating\": \"5\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4444/api/books",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4444",
					"path": [
						"api",
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test 7: chain request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"for(var i = 0;i<10;i++){ \r",
							"pm.sendRequest(\"http://localhost:4444/api/books\",(error, response) => {\r",
							"  if (error) {\r",
							"    console.log(error);\r",
							"  }\r",
							"     \r",
							"  pm.test(\"checking title betwhin requests\", () => {\r",
							"    var res = response.json();\r",
							"    pm.expect(pm.response.json()[0].title).to.be.equal(res[0].title);\r",
							"  });\r",
							"    pm.test(\"checking author betwhin requests\", () => {\r",
							"    var res = response.json();\r",
							"    pm.expect(pm.response.json()[0].author).to.be.equal(res[0].author);\r",
							"  });\r",
							"});\r",
							"};"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4444/api/books",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4444",
					"path": [
						"api",
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test 8: post book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.environment.set(\"id\", pm.response.json()[1]._id);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"        pm.response.to.have.header(\"Content-Type\");\r",
							"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n      \"title\": \"The rise of the oda clan\",\r\n      \"author\": \"Nagao Sakuya\",\r\n      \"genre\": \"action\",\r\n      \"releaseDate\": \"sun 29 2020\",\r\n      \"info\": \"====================================================\",\r\n      \"rating\": \"5\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4444/api/books",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4444",
					"path": [
						"api",
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test 8: update book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"        pm.response.to.have.header(\"Content-Type\");\r",
							"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"pm.environment.set(\"book\", pm.response.json());\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n      \"title\": \"The rise of darkness\",\r\n      \"author\": \"サクヤ\",\r\n      \"genre\": \"si-fi\",\r\n      \"releaseDate\": \"sun 19 2010\",\r\n      \"info\": \"0ohshfifisgfidfgsihuhdfiuhsifhusidhfiuhf\",\r\n      \"rating\": \"5\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4444/api/books/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4444",
					"path": [
						"api",
						"books",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test 9: get book by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const obj={\r",
							"        \"title\" : pm.response.json()[1].title,\r",
							"        \"author\" : pm.response.json()[1].author,\r",
							"        \"genre\" : pm.response.json()[1].genre,\r",
							"        \"releaseDate\" : pm.response.json()[1].releaseDate,\r",
							"        \"info\":  pm.response.json()[1].info,\r",
							"        \"rating\" : pm.response.json()[1].rating,\r",
							"    }\r",
							"pm.test(\"author is consistent\",function () {\r",
							"    const bookFromPut = pm.environment.get(\"book\");\r",
							"    pm.expect(bookFromPut.author).to.be.equal(obj.author);\r",
							"});\r",
							"pm.test(\"title is consistent\",function () {\r",
							"    const bookFromPut = pm.environment.get(\"book\");\r",
							"    pm.expect(bookFromPut.title).to.be.equal(obj.title);\r",
							"});\r",
							"pm.test(\"genre is consistent\",function () {\r",
							"    const bookFromPut = pm.environment.get(\"book\");\r",
							"    pm.expect(bookFromPut.genre).to.be.equal(obj.genre);\r",
							"});\r",
							"pm.test(\"releaseDate is consistent\",function () {\r",
							"    const bookFromPut = pm.environment.get(\"book\");\r",
							"    pm.expect(bookFromPut.releaseDate).to.be.equal(obj.releaseDate);\r",
							"});\r",
							"pm.test(\"info is consistent\",function () {\r",
							"    const bookFromPut = pm.environment.get(\"book\");\r",
							"    pm.expect(bookFromPut.info).to.be.equal(obj.info);\r",
							"});\r",
							"pm.test(\"rating is consistent\",function () {\r",
							"    const bookFromPut = pm.environment.get(\"book\");\r",
							"    pm.expect(bookFromPut.rating).to.be.equal(obj.rating);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4444/api/books/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4444",
					"path": [
						"api",
						"books",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test 9: delete book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:4444/api/books/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4444",
					"path": [
						"api",
						"books",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test 11: disconnect db",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4444/api/testing/connection/close",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4444",
					"path": [
						"api",
						"testing",
						"connection",
						"close"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test 11: get all books no db",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"        pm.response.to.have.header(\"Content-Type\");\r",
							"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4444/api/books",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4444",
					"path": [
						"api",
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test 11: open db connection",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4444/api/testing/connection/open",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4444",
					"path": [
						"api",
						"testing",
						"connection",
						"open"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test 11: get all books reconnected to db",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"        pm.response.to.have.header(\"Content-Type\");\r",
							"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4444/api/books",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4444",
					"path": [
						"api",
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test 12: edge case",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"        pm.response.to.have.header(\"Content-Type\");\r",
							"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n      \"title\": \"The warframe saga\",\r\n      \"author\": \"サクヤ\",\r\n      \"genre\": \"si-fi\",\r\n      \"releaseDate\": 20\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4444/api/books",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4444",
					"path": [
						"api",
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test 13 check rate limit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"X-RateLimit-Limit is present\", function () {\r",
							"    pm.response.to.have.header(\"X-RateLimit-Limit\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "http://localhost:4444/api/books",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4444",
					"path": [
						"api",
						"books"
					]
				}
			},
			"response": []
		}
	]
}